/// <reference types="Cypress" />

beforeEach(() => {
	cy.visit('./src/index.html')
})

describe('Central de Atendimento ao Cliente TAT', () => {
	it('verifica o t√≠tulo da aplica√ß√£o', () => {
		cy.title().should('include', 'Central de Atendimento ao Cliente TAT')
	})
	it('preenche os campos obrigat√≥rios e envia o formul√°rio', () => {
		cy.get('#firstName').type('Fulano')
		cy.get('#lastName').type('de Tal')
		cy.get('#email').type('teste@teste.com')
		cy.get('#open-text-area').type('Lorem Ipsum √© simplesmente uma simula√ß√£o de texto da ind√∫stria tipogr√°fica e de impressos, e vem sendo utilizado desde o s√©culo XVI.', { delay: 0 })
		cy.get('.button').click()
		cy.get('.success').should('contain', 'Mensagem enviada com sucesso.')
	})
	it('exibe mensagem de erro ao submeter o formul√°rio com um email com formata√ß√£o inv√°lida', () => {
		cy.get('#firstName').type('Fulano')
		cy.get('#lastName').type('de Tal')
		cy.get('#email').type('teste.com')
		cy.get('#open-text-area').type('Lorem Ipsum √© simplesmente uma simula√ß√£o de texto da ind√∫stria tipogr√°fica e de impressos, e vem sendo utilizado desde o s√©culo XVI.', { delay: 0 })
		cy.get('.button').click()
		cy.get('.error').should('contain', 'Valide os campos obrigat√≥rios!')
	})
	it('valida campo n√∫mero de telefone com valor n√£o-num√©rico', () => {
		cy.get('#phone')
			.type('teste')
			.should('have.value', '')
	})
	it('preenche e limpa os campos nome, sobrenome, email e telefone', () => {
		cy.get('#firstName').type('Fulano').should('have.value', 'Fulano').clear().should('have.value', '')
		cy.get('#lastName').type('de Tal').should('have.value', 'de Tal').clear().should('have.value', '')
		cy.get('#email').type('teste@teste.com').should('have.value', 'teste@teste.com').clear().should('have.value', '')
		cy.get('#phone').type('75999999999').should('have.value', '75999999999').clear().should('have.value', '')
	})
	it('exibe mensagem de erro ao submeter o formul√°rio sem preencher os campos obrigat√≥rios', () => {
		cy.get('.button').click()
		cy.get('.error').should('contain', 'Valide os campos obrigat√≥rios!')
	})
	it('envia o formu√°rio com sucesso usando um comando customizado', () => {
		cy.fillMandatoryFieldsAndSubmit()

		cy.get('.success').should('contain', 'Mensagem enviada com sucesso.')
	})
	it('substitundo o cy.get pelo cy.contains para clicar no bot√£o', () => {
		cy.get('#firstName').type('Fulano')
		cy.get('#lastName').type('de Tal')
		cy.get('#email').type('teste@teste.com')
		cy.get('#open-text-area').type('Lorem Ipsum √© simplesmente uma simula√ß√£o de texto da ind√∫stria tipogr√°fica e de impressos, e vem sendo utilizado desde o s√©culo XVI.', { delay: 0 })
		cy.contains('button', 'Enviar').click()
		cy.get('.success').should('contain', 'Mensagem enviada com sucesso.')
	})
	it('seleciona um produto (YouTube) por seu texto', () => {
		cy.get('select').select('YouTube')
			.should('have.value', 'youtube')
	})
	it('seleciona um produto (Mentoria) por seu valor (value)', () => {
		cy.get('select').select('mentoria')
			.should('have.value', 'mentoria')
	})
	it('seleciona um produto (Blog) por seu √≠ndice', () => {
		cy.get('select').select(1)
			.should('have.value', 'blog')
	});
	it('marca o tipo de atendimento "Feedback"', () => {
		cy.get('[type="radio"]').check('feedback')
			.should('be.checked')
	})
	it('marca cada tipo de atendimento', () => {
		cy.get('[type="radio"]').check('ajuda')
			.should('be.checked')
		cy.wait(1000)
		cy.get('[type="radio"]').check('elogio')
			.should('be.checked')
		cy.wait(1000)
		cy.get('[type="radio"]').check('feedback')
			.should('be.checked')
	})
	it('marca ambos checkboxes, depois desmarca o √∫ltimo', () => {
		cy.get('[type="checkbox"]')
			.check()
			.last()
			.uncheck()
			.should('not.be.checked')
	})
	it('exibe mensagem de erro quando o telefone se torna obrigat√≥rio mas n√£o √© preenchido antes do envio do formul√°rio', () => {
		cy.get('[type="checkbox"]').check('phone')
		cy.get('.button').click()

		cy.get('.error').should('contain', 'Valide os campos obrigat√≥rios!')
	})
	it('seleciona um arquivo da pasta fixtures', () => {
		cy.get('input[type="file"]')
			.should('not.have.value')
			.selectFile('cypress/fixtures/example.json')
			.should(function($input) {
				expect($input[0].files[0].name).to.eq('example.json')
		})
	})
	it('seleciona um arquivo simulando um drag-and-drop', () => {
		cy.get('input[type="file"]')
			.should('not.have.value')
			.selectFile('cypress/fixtures/example.json', {action: 'drag-drop'})
			.should(function($input) {
				expect($input[0].files[0].name).to.eq('example.json')
		})
	})
	it('seleciona um arquivo utilizando uma fixture para a qual foi dada um alias', () => {
		cy.fixture('example.json').as('file')
		cy.get('input[type="file"]')
			.selectFile('@file')
			.should(function($input) {
				expect($input[0].files[0].name).to.eq('example.json')
		}) 
	})
	it('verifica que a pol√≠tica de privacidade abre em outra aba sem a necessidade de um clique', () => {
		cy.get('#privacy a').should('have.attr', 'target', '_blank')
	})
	it('removendo target atributo', () => {
		cy.get('#privacy a')
			.invoke('removeAttr', 'target')
			.click()

		cy.contains('Talking About Testing').should('be.visible')
	})
})

describe('Central de Atendimento ao Cliente TAT - Avan√ßado', () => {
	const THREE_SECONDS_IN_MS = 3000

	it('exibe mensagem por 3 segundos', () => {
		cy.clock() // congela o rel√≥gio do navegador
	  
		// (...) // a√ß√£o que dispara algo que exibe uma mensagem por tr√™s segundos
		cy.get('#firstName').type('Fulano')
		cy.get('#lastName').type('de Tal')
		cy.get('#email').type('teste@teste.com')
		cy.get('#open-text-area').type('Lorem Ipsum √© simplesmente uma simula√ß√£o de texto da ind√∫stria tipogr√°fica e de impressos, e vem sendo utilizado desde o s√©culo XVI.', { delay: 0 })
		cy.get('.button').click()
		
		// (...) // verifica√ß√£o de que a mensagem est√° vis√≠vel
		cy.get('.success').should('contain', 'Mensagem enviada com sucesso.')
	  
		cy.tick(THREE_SECONDS_IN_MS) // avan√ßa o rel√≥gio tr√™s segundos (em milissegundos). Avan√ßo este tempo para n√£o perd√™-lo esperando.
	  
		// (...) // verifica√ß√£o de que a mensagem n√£o est√° mais vis√≠vel
		cy.get('.success').should('not.be.visible')
	})

	it('exibe e esconde as mensagens de sucesso e erro usando o .invoke', () => {
		cy.get('.success')
			.should('not.be.visible')
			.invoke('show')
			.should('be.visible')
			.and('contain', 'Mensagem enviada com sucesso.')
			.invoke('hide')
			.should('not.be.visible')
		cy.get('.error')
			.should('not.be.visible')
			.invoke('show')
			.should('be.visible')
			.and('contain', 'Valide os campos obrigat√≥rios!')
			.invoke('hide')
			.should('not.be.visible')
	})
	it('preenche a area de texto usando o comando invoke', () => {
		const longText = Cypress._.repeat('0123456789', 20)
		cy.get('#open-text-area')
			.invoke('val', longText)
			.should('have.value', longText)
	})
	it('faz uma requisi√ß√£o HTTP', () => {
		cy.request('https://cac-tat.s3.eu-central-1.amazonaws.com/index.html')
			.should((response) => {
				const { status, statusText, body } = response
				expect(status).to.eq(200)
				expect(statusText).to.eq('OK')
				expect(body).to.include('CAC TAT')
			})
	})
	it('desafio encontre o gato via requisi√ß√£o HTTP', () => {
		cy.request('https://cac-tat.s3.eu-central-1.amazonaws.com/index.html')
			.should((response) => {
				expect(response.body).to.include('üêà')
			})
	})
	it.only('encontre o gato escondido - resolu√ß√£o professor', () => {
		cy.get('#cat')
			.invoke('show')
			.should('be.visible')
		cy.get('#title')
			.invoke('text', 'CAT TAT')
		cy.get('#subtitle')
			.invoke('text', 'Eu ‚ù§Ô∏è gatos')
	})
	
})